<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UART串口通信</title>
      <link href="/2023/06/02/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/06/02/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="UART通信原理"><a href="#UART通信原理" class="headerlink" title="UART通信原理"></a><font color= salmon size=5>UART通信原理</font ></h1><ul><li><font color= LightSkyBlue size=4>  UART（universal asynchronous receiver-transmitter）是一种采用<mark>异步串行通信</mark>方式的<mark>通用异步收发传输器</mark>；它在发送数据时将并行数据转换成串行数据来传输，在接收数据时将接收到的串行数据转换成并行数据。<br><br>UART串口通信需要两根信号线来实现，一根用于发送，另外一根接收。</li></ul><ol><li><p>协议层：通信协议（包括数据格式、传输速率等）</p><ul><li>传输速率<br> <br>串口通信的速率用波特率表示，它表示每秒传输二进制数据的位数，单位是bit&#x2F;s(位&#x2F;秒)，简称bps;<br> 常用的波特率有9600、19200、38400、57600以及115200等<br> <img src="/../../img/%E6%B3%A2%E7%89%B9%E7%8E%87%E5%92%8C%E6%AF%94%E7%89%B9%E7%8E%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86.png" alt="波特率和比特率的基本知识"></li></ul><p> <mark>比特率和波特率既有联系,又有区别。比特率描述的是数据，波特率描述的是信号。我们知道，数据是用信号来表示的。如果一个信号码元只能代表1 比特，那么波特率和比特率是相等的。如果一个码元可以表示n个比特信息，那么比特率是波特率的n倍。</mark></p><ul><li>数据格式<br> <br>数据格式，一帧数据由4部分构成<ul><li>起始位（1bit）</li><li>数据位（6&#x2F;7&#x2F;8bit）</li><li>奇偶校验位（1bit）</li><li>停止位（1bit\1.5bit\2bit）UART数据格式<br> <img src="/../../img/UART%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png" alt="UART数据格式"></li></ul></li></ul></li><li><p>物理层：接口类型、电平标准等。</p></li></ol></font > ]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> 串口通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> UART </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA开发流程</title>
      <link href="/2023/05/24/FPGA%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/05/24/FPGA%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="FPGA开发流程"><a href="#FPGA开发流程" class="headerlink" title="FPGA开发流程"></a>FPGA开发流程</h1><h2 id="1-分析需求，确定方案"><a href="#1-分析需求，确定方案" class="headerlink" title="1. 分析需求，确定方案 "></a><font color= salmon size=5>1. 分析需求，确定方案 </font ></h2><h2 id="2-设计方案（程序框图、模块划分、模块间信号、模块内信号、模块逻辑确定、模块逻辑实现方式……）【确定程序框架、确定接口、模块间信号、模块内信号】"><a href="#2-设计方案（程序框图、模块划分、模块间信号、模块内信号、模块逻辑确定、模块逻辑实现方式……）【确定程序框架、确定接口、模块间信号、模块内信号】" class="headerlink" title="2.设计方案（程序框图、模块划分、模块间信号、模块内信号、模块逻辑确定、模块逻辑实现方式……）【确定程序框架、确定接口、模块间信号、模块内信号】"></a><br><font color= salmon size=5>2.设计方案（程序框图、模块划分、模块间信号、模块内信号、模块逻辑确定、模块逻辑实现方式……）【确定程序框架、确定接口、模块间信号、模块内信号】</font ></h2><h2 id="3-设计输入（写代码-VerilogHDL-x2F-VHDL编码）"><a href="#3-设计输入（写代码-VerilogHDL-x2F-VHDL编码）" class="headerlink" title="3.设计输入（写代码(VerilogHDL&#x2F;VHDL编码）"></a><br><font color= salmon size=5>3.设计输入（写代码(VerilogHDL&#x2F;VHDL编码）</font ></h2><h2 id="4-RTL功能仿真（验证逻辑功能-amp-数据流，Modelsim-编译"><a href="#4-RTL功能仿真（验证逻辑功能-amp-数据流，Modelsim-编译" class="headerlink" title="4.RTL功能仿真（验证逻辑功能&amp;数据流，Modelsim)编译"></a><br><font color= salmon size=5>4.RTL功能仿真（验证逻辑功能&amp;数据流，Modelsim)编译</font ></h2><h2 id="5-分析综合（将设计映射为器件模型，生成网表文件）【分析语法错误】"><a href="#5-分析综合（将设计映射为器件模型，生成网表文件）【分析语法错误】" class="headerlink" title="5.分析综合（将设计映射为器件模型，生成网表文件）【分析语法错误】"></a><br><font color= salmon size=5>5.分析综合（将设计映射为器件模型，生成网表文件）【分析语法错误】</font ></h2><h2 id="6-布局布线（功能映射、指定布线资源）【利用分析与综合建立的数据库】"><a href="#6-布局布线（功能映射、指定布线资源）【利用分析与综合建立的数据库】" class="headerlink" title="6.布局布线（功能映射、指定布线资源）【利用分析与综合建立的数据库】"></a><br><font color= salmon size=5>6.布局布线（功能映射、指定布线资源）【利用分析与综合建立的数据库】</font ></h2><h2 id="7-门级仿真（根据估计的布局布线延时进行时序仿真）"><a href="#7-门级仿真（根据估计的布局布线延时进行时序仿真）" class="headerlink" title="7.门级仿真（根据估计的布局布线延时进行时序仿真）"></a><br><font color= salmon size=5>7.门级仿真（根据估计的布局布线延时进行时序仿真）</font ></h2><h2 id="8-时序分析（验证设计是否满足时序和性能要求——Timing-Analyzer工具）时序仿真"><a href="#8-时序分析（验证设计是否满足时序和性能要求——Timing-Analyzer工具）时序仿真" class="headerlink" title="8.时序分析（验证设计是否满足时序和性能要求——Timing Analyzer工具）时序仿真"></a><br><font color= salmon size=5>8.时序分析（验证设计是否满足时序和性能要求——Timing Analyzer工具）时序仿真</font ></h2><h2 id="9-板级验证（板级调试——Signal-Tap嵌入式逻辑分析工具）"><a href="#9-板级验证（板级调试——Signal-Tap嵌入式逻辑分析工具）" class="headerlink" title="9.板级验证（板级调试——Signal Tap嵌入式逻辑分析工具）"></a><br><font color= salmon size=5>9.板级验证（板级调试——Signal Tap嵌入式逻辑分析工具）</font ></h2>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> FPGA开发流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> FPGA开发流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步复位和异步复位的区别</title>
      <link href="/2023/05/24/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E5%92%8C%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/05/24/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D%E5%92%8C%E5%BC%82%E6%AD%A5%E5%A4%8D%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="同步复位和异步复位的区别"><a href="#同步复位和异步复位的区别" class="headerlink" title="同步复位和异步复位的区别"></a>同步复位和异步复位的区别</h1><h2 id=""><a href="#" class="headerlink" title=""></a><font color= salmon size=5></h2><ul><li><ol><li><font color= salmon size=5>同步复位：复位的有效条件与clk的上升沿有关，当clk的上升沿采到rst_n为低的时候可复位。<br></li></ol></li><li><ol start="2"><li><font color= salmon size=5>异步复位：复位的触发条件不仅与clk的上升沿有关，还与rst_n的下降沿有关，当clk上升沿采到rst_n为低时可复位，同时当遇到rst_n下降沿时也进行复位。<br></li></ol></li><li><ol start="3"><li><font color= salmon size=5>同步复位是指复位信号只有在时钟上升沿到来时才能有效，否则无法完成对系统的复位工作。异步复位是指无论时钟沿是否到来，只要复位信号有效，就能对系统进行复位。异步复位对复位信号的质量要求比较高，不能有毛刺，如果其与时钟关系不确定，也可能出现亚稳态。</font ></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> FPGA基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> 同步复位 </tag>
            
            <tag> 异步复位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Avalon_MM接口的SDRAM读写</title>
      <link href="/2023/05/23/%E5%9F%BA%E4%BA%8EAvalon_MM%E6%8E%A5%E5%8F%A3%E7%9A%84SDRAM%E8%AF%BB%E5%86%99/"/>
      <url>/2023/05/23/%E5%9F%BA%E4%BA%8EAvalon_MM%E6%8E%A5%E5%8F%A3%E7%9A%84SDRAM%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计思路"><a href="#程序设计思路" class="headerlink" title="程序设计思路"></a><font color= salmon size=5>程序设计思路</font ></h1><h2 id="一-大体思路框架"><a href="#一-大体思路框架" class="headerlink" title="一.大体思路框架 "></a><font color= salmon size=5>一.大体思路框架 </font ></h2><ul><li><font color= VioletRed size=5> PC通过串口助手，经过UART RX模块发送连续字节数据进入SDRAM_CTRL模块，SDRAM_CTRL模块里的WRfifo,接受RX传入的数据，WR_EN打开，同时传入地址和对应数据，通过满足Avalon时序（【WRfifo】读端：avm_waitrequest为低，非读空；写端：非写满，数据有效。【state】WRfifo读端rdusedw&gt;&#x3D;需要一次连续写入的数据量），传入Avalon_MM端口模块，再RD_EN打开，传入地址，经过Avalon端口读出SDRAM内部数据，传入SDRAM_CTRL模块里的RDfifo（【RDfifo】写端：avm_rd_data_vld 且非写满；读端：UART TX端非忙且非读空。），再传入UART TX端，PC通过串口助手接受到数据。</font ><br><ul><li><font color= LightSkyBlue size=5>  使用Avalon_MM接口后，我们只需考虑SDRAM_Control模块（SDRAM控制模块）【内含WRfifo,RDfifo】，如何满足接收和发送数据到Avalon_MM接口即可，不用考虑SDRAM内部运行的过程。</font > </li><li><font color= red size=5> 有四个状态,IDLE(空闲状态),WRITE(SDRAM写过程)，READ(SDRAM读过程)，DONE（结束）</font ></li></ul></li></ul><font color= fuchsia size=5> <details><summary>展开查看相关代码</summary><pre><code> <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//状态转移条件</span></span><br><span class="line"> <span class="keyword">assign</span> idle2read  = (state_c == IDLE) &amp;&amp; (rd_req) ;  <span class="comment">//当按键按下时，状态从IDLE跳转到READ</span></span><br><span class="line"> <span class="keyword">assign</span> idle2write = (state_c == IDLE) &amp;&amp; (rdusedw_sig &gt;= <span class="number">8&#x27;d3</span>);<span class="comment">//当WRfifo读端表示至少还有3个16bit数据后，状态从IDLE跳转到READ，开始进行读操作</span></span><br><span class="line"> <span class="keyword">assign</span> read2done  = (state_c == READ) &amp;&amp; (end_cnt_rd_num);<span class="comment">//当读出数据计数器记到结束条件（读出数据个数为3时），状态从READ跳转到DONE</span></span><br><span class="line"> <span class="keyword">assign</span> write2done = (state_c == WRITE)&amp;&amp; (end_cnt_wr_num);<span class="comment">//当写入数据计数器记到结束条件（写入数据个数为3时），状态从WRITE跳转到DONE</span></span><br><span class="line"> <span class="keyword">assign</span> done2idle  = (state_c == DONE) &amp;&amp; <span class="number">1&#x27;d1</span>;<span class="comment">//DONE状态直接跳转为IDLE</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font > <h2 id="二-SDRAM从写入到读出的过程"><a href="#二-SDRAM从写入到读出的过程" class="headerlink" title="二.SDRAM从写入到读出的过程 "></a><font color= salmon size=5>二.SDRAM从写入到读出的过程 </font ></h2><ul><li><font color= LightSkyBlue size=5> 1. UART_RX接收到PC串口发送的8bit数据,传入SDRAM_Control模块里的WRfifo。</font > </li><li><font color= LightSkyBlue size=5> 2. WRfifo根据Avalon总线协议和WRfifo自身状态，控制WRfifo的读写使能的开启条件。</font ></li></ul><font color= fuchsia size=5> <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WRfifo</span></span><br><span class="line"><span class="keyword">assign</span> wrreq_sig = (din_vld) &amp;&amp; (!wrfull_sig) ;  </span><br><span class="line"><span class="comment">//WRfifo里的写使能开启条件为：从UART_RX输入到SDRAM_Control模块的8bit数据有效(din_vld)，且WR_fifo写非空的状态下(!wrfull_sig)，进行WRfifo的写操作。</span></span><br><span class="line"><span class="keyword">assign</span> rdreq_sig = (!rdempty_sig) &amp;&amp; (!avm_waitrequest) &amp;&amp; (state_c == WRITE);</span><br><span class="line"><span class="comment">//WRfifo里的读使能开启条件为：当WRfifo读非空的状态下（rdreq_sig），且上升沿对等待请求（avm_waitrequest）为低的状态下【因为只有在avm_waitrequest为低电平时数据才能传入Avalon_MM串口(当avm_waitrequest为高电平时SDRAM还没有准备好接受或者发送数据)，进而传入SDRAM】， 且在读状态下，进行WRfifo数据的数据读出。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font ><ul><li><font color= LightSkyBlue size=5> 3. WRfifo的读使能要在读状态下且avm_waitrequest为低，WRfifo非读空状态下才有效。当WRfifo读使能有效时,要确保WRfifo里读端的每个16bit数据与SDRAM所要写入的地址的同时输入到Avalon_MM接口模块。所以让地址（Addr）计数开启条件和写入Avalon_MM 16bit数据个数开始计数条件都在读状态下且avm_waitrequest为低时开始，当avm_waitrequest拉高时停止计数，保持地址和数据，当avm_waitrequest再一次为低电平时，继续写入16bit数据和对应地址。因为avm_waitrequest会在接受到wr_en或rd_en信号后拉高，当SDRAM能接受数据后才会拉低avm_waitrequest，拉低时的每个时钟周期就可以接受1个16bit数据与其对应的地址位。在此期间wr_en或rd_en都持续有效，等到连续数据全部输入或者传出后，跳出WRITE和READ状态，wr_en或rd_en才拉低。</font ></li></ul><font color= fuchsia size=5>   <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cnt_wr_addr 写地址计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">23</span>:<span class="number">0</span>] cnt_wr_addr;         <span class="comment">//24位宽地址   </span></span><br><span class="line"><span class="keyword">wire</span> add_cnt_wr_addr;                                                       </span><br><span class="line"><span class="keyword">wire</span> end_cnt_wr_addr;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_wr_addr = (state_c == WRITE) &amp;&amp; (!avm_waitrequest); <span class="comment">//地址计数开始条件为读状态下，且avm_waitrequest为低电平时。保证了在WRfifo读请求有效时，同时传入地址位。当在读状态下，avm_waitrequest为低电平的每个周期都写入1个地址。（为了方便我们把地址计数数据也当为地址数据（相当于在读状态下，avm_waitrequest为低电平的每个周期都输入从0开始到对应第几次的地址））</span></span><br><span class="line"><span class="keyword">assign</span> end_cnt_wr_addr = (add_cnt_wr_addr) &amp;&amp; (cnt_wr_addr == <span class="number">24&#x27;d10</span>); <span class="comment">//最多可以计数10个地址（相当于最多写入10个地址）【可以修改为大于或等于写入的数据个数的地址位，因为每个数据需要与对应的地址匹配】</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_wr_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_wr_addr) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_wr_addr) <span class="keyword">begin</span></span><br><span class="line">            cnt_wr_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_wr_addr &lt;= cnt_wr_addr +<span class="number">24&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <br> 若地址计数个数设置为大于一次连续输入数据的个数，多余的地址可以作为串口端超过一次连续输入个数的数据的地址。</p><p> <br> example：在PC串口助手端口一次性输入16个8bit数据，状态机从IDLE跳转到WRITE的条件为rdusedw_sig &gt;&#x3D; 8’d3<br>（相当于wrusedw_sig &gt;&#x3D; 8’d6【因为WRfifo写端为8bit数据，读端为16bit数据，写端每写入2个8bit数据，写端<br>wrusedw_sig加2，读端rdusedw_sig才加1】），写入数据次数到3的时候，状态机从WRITE跳到DONE，DONE直接跳转<br>到IDLE，因状态机从IDLE跳转到WRITE的条件为rdusedw_sig &gt;&#x3D; 8’d3，WRfifo读出了3个16bits数据，还剩5个16b<br>it数据，满足IDLE跳转到WRITE的条件，再次进入写状态，等待avm_waitrequest为低电平时，把剩余的地址按顺序和WR<br>fifo里后续的3个16bit数据，依次同时对应传输到Avalon_MM，这样循环，直到不满足跳转条件。</p><p>【特殊情况】&#123;当数据大于剩余地址时，存储会出错，这需要考虑&#125;</p><p></code></pre></p></details></font ><ul><li><font color= LightSkyBlue size=5> 4. 当WRfifo把3位16bit数据输入到Avalon_MM接口模块后，Avlaon会根据它自身协议把数据和对应的地址在同一时钟下写入SDRAM。</font ></li></ul><font color= fuchsia size=5>   <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//cnt_wr_num</span></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">4</span>:<span class="number">0</span>] cnt_wr_num;</span><br><span class="line"><span class="keyword">wire</span> add_cnt_wr_num;</span><br><span class="line"><span class="keyword">wire</span> end_cnt_wr_num;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_wr_num = (state_c == WRITE) &amp;&amp; (!avm_waitrequest) ;<span class="comment">//数据输入计数开启条件为在WRTIE状态下且avm_waitrequest为低时计数</span></span><br><span class="line"><span class="keyword">assign</span> end_cnt_wr_num = (add_cnt_wr_num) &amp;&amp; (cnt_wr_num == <span class="number">5&#x27;d2</span>); <span class="comment">//计到3个数据后结束计数（跳转到DONE状态）</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_wr_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_wr_num) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_wr_num) <span class="keyword">begin</span></span><br><span class="line">            cnt_wr_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_wr_num &lt;= cnt_wr_num +<span class="number">1&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font ><ul><li><font color= LightSkyBlue size=5> 5. 当写入数据完成后，按下按键（按键控制读状态开始），当按键按下后，状态机从IDLE状态进入READ状态，与WRITE状态类似，在READ状态下，只需在avm_waitrequest为低时传入地址（ADDR）数据即可，Avalon_MM接口在rd_en信号有效，avm_waitrequest，且接受到地址后可以让SDRAM接受到读数据信号，但SDRAM内部会做一系列操作，可能从SDRAM读出数据时，READ状态已经过了，所以RDfifo的写请求（wrreq）条件为Avalon数据有效（avm_rd_data_vld）并且RDfifo非写满(!wrfull)状态，并不需要保证在读状态。RDfifo读端的读使能条件就很简单了，是串口发送模块非忙(!nrdy) 且RDfifo非读空 (!rdempty) 时就行。     </font ></li></ul><font color= fuchsia size=5>   <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rdfifo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] q_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> rdreq_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> rdempty_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> wrreq_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> wrfull_sig_2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]dout_r;</span><br><span class="line">   <span class="keyword">reg</span> dout_vld_r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">      dout_r &lt;= <span class="number">0</span> ;</span><br><span class="line">      dout_vld_r &lt;= <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">   dout_r  &lt;=  q_sig_2;</span><br><span class="line">   dout_vld_r &lt;= rdreq_sig_2;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">   <span class="keyword">assign</span> dout = dout_r; </span><br><span class="line">   <span class="keyword">assign</span> dout_vld = dout_vld_r;<span class="comment">//输出数据和输出有效信号同时延迟一拍，保证传入串口发送模块的数据稳定，也保证了有效数据信号和有效数据同步</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">assign</span> rdreq_sig_2 = (!nrdy) &amp;&amp; (!rdempty_sig_2) ; </span><br><span class="line">   <span class="keyword">assign</span> wrreq_sig_2 = (avm_rd_data_vld) &amp;&amp; (!wrfull_sig_2) ; <span class="comment">//输出数据时，可能已经不是在读状态了</span></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font ><ul><li><font color= LightSkyBlue size=5> wr_en和rd_en的条件分别读写状态和读状态（因为读，写使能是低电平有效，所以取反）。虽然拉高了读写状态，但是只有在avm_waitrequest为低才有数据的传输，写状态结束后已经把数据传入了Avlaon,【特别】读状态结束后，数据不一定能传输完成，因为指令虽传入SDRAM，但SDRAM输出数据还有一段时间。上面已经说过了，这里就不再累述。</font ></li></ul><font color= fuchsia size=5>   <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wr_en,rd_en</span></span><br><span class="line">   <span class="keyword">assign</span>   avm_wr_n = !(state_c == WRITE);<span class="comment">//输出</span></span><br><span class="line">   <span class="keyword">assign</span>   avm_rd_n = !(state_c == READ);<span class="comment">//输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font ><ul><li><font color= LightSkyBlue size=5>地址（ADDR）因为只有一条线，所以需要读写共用一条地址线。</font ></li></ul><font color= fuchsia size=5> <details><summary>展开查看相关代码</summary><pre><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addr有效地址位数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">23</span>:<span class="number">0</span>] addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> avm_addr = addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> addr = (&#123;<span class="number">24</span>&#123;state_c == READ&#125;&#125; &amp; cnt_rd_addr) | (&#123;<span class="number">24</span>&#123;state_c == WRITE&#125;&#125; &amp; cnt_wr_addr) ;<span class="comment">//有效地址位</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></code></pre></p></details></font ><h1 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a><font color= salmon size=5>程序代码</font ></h1><h2 id="Avalon-MM控制模块代码"><a href="#Avalon-MM控制模块代码" class="headerlink" title="Avalon_MM控制模块代码 "></a><font color= salmon size=5>Avalon_MM控制模块代码 </font ></h2><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> sdram_ctrl (</span><br><span class="line">    <span class="keyword">input</span> sys_clk_in,</span><br><span class="line">    <span class="keyword">input</span> sys_clk_out,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//pll</span></span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>]din,</span><br><span class="line">    <span class="keyword">input</span> din_vld,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//uart_tx</span></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>]dout,</span><br><span class="line">    <span class="keyword">output</span> dout_vld,</span><br><span class="line">    <span class="keyword">input</span> nrdy,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce</span></span><br><span class="line">    <span class="keyword">input</span> rd_req,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sdram_interface</span></span><br><span class="line">    <span class="comment">//output [1:0]avm_byteenable,</span></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">23</span>:<span class="number">0</span>]avm_addr,</span><br><span class="line">    <span class="keyword">output</span> avm_wr_n,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">15</span>:<span class="number">0</span>]avm_wr_data,</span><br><span class="line">    <span class="keyword">output</span> avm_rd_n,</span><br><span class="line">    <span class="keyword">input</span>  [<span class="number">15</span>:<span class="number">0</span>]avm_rd_data,</span><br><span class="line">    <span class="keyword">input</span>  avm_rd_data_vld,</span><br><span class="line">    <span class="keyword">input</span> avm_waitrequest</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]state_c;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]state_n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">localparam</span> IDLE  = <span class="number">4&#x27;b0001</span>,</span><br><span class="line">               READ  = <span class="number">4&#x27;b0010</span>,</span><br><span class="line">               WRITE = <span class="number">4&#x27;b0100</span>,</span><br><span class="line">               DONE  = <span class="number">4&#x27;b1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> idle2read;</span><br><span class="line">    <span class="keyword">wire</span> idle2write;</span><br><span class="line">    <span class="keyword">wire</span> read2done;</span><br><span class="line">    <span class="keyword">wire</span> write2done;</span><br><span class="line">    <span class="keyword">wire</span> done2idle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//cnt_wr_addr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">23</span>:<span class="number">0</span>] cnt_wr_addr;</span><br><span class="line"><span class="keyword">wire</span> add_cnt_wr_addr;</span><br><span class="line"><span class="keyword">wire</span> end_cnt_wr_addr;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_wr_addr = (state_c == WRITE) &amp;&amp; (!avm_waitrequest);</span><br><span class="line"><span class="keyword">assign</span> end_cnt_wr_addr = (add_cnt_wr_addr) &amp;&amp; (cnt_wr_addr == <span class="number">24&#x27;d10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_wr_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_wr_addr) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_wr_addr) <span class="keyword">begin</span></span><br><span class="line">            cnt_wr_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_wr_addr &lt;= cnt_wr_addr +<span class="number">24&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//cnt_rd_addr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">23</span>:<span class="number">0</span>] cnt_rd_addr;</span><br><span class="line"><span class="keyword">wire</span> add_cnt_rd_addr;</span><br><span class="line"><span class="keyword">wire</span> end_cnt_rd_addr;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_rd_addr = (state_c == READ) &amp;&amp; (!avm_waitrequest);</span><br><span class="line"><span class="keyword">assign</span> end_cnt_rd_addr = (add_cnt_rd_addr) &amp;&amp; (cnt_rd_addr == <span class="number">24&#x27;d10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_rd_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_rd_addr) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_rd_addr) <span class="keyword">begin</span></span><br><span class="line">            cnt_rd_addr &lt;= <span class="number">24&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_rd_addr &lt;= cnt_rd_addr +<span class="number">24&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//addr有效地址位数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">23</span>:<span class="number">0</span>] addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> avm_addr = addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> addr = (&#123;<span class="number">24</span>&#123;state_c == READ&#125;&#125; &amp; cnt_rd_addr) | (&#123;<span class="number">24</span>&#123;state_c == WRITE&#125;&#125; &amp; cnt_wr_addr) ;<span class="comment">//有效地址位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//cnt_wr_num</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">4</span>:<span class="number">0</span>] cnt_wr_num;</span><br><span class="line"><span class="keyword">wire</span> add_cnt_wr_num;</span><br><span class="line"><span class="keyword">wire</span> end_cnt_wr_num;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_wr_num = (state_c == WRITE) &amp;&amp; (!avm_waitrequest) ;</span><br><span class="line"><span class="keyword">assign</span> end_cnt_wr_num = (add_cnt_wr_num) &amp;&amp; (cnt_wr_num == <span class="number">5&#x27;d2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_wr_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_wr_num) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_wr_num) <span class="keyword">begin</span></span><br><span class="line">            cnt_wr_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_wr_num &lt;= cnt_wr_num +<span class="number">1&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//cnt_rd_num</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">4</span>:<span class="number">0</span>] cnt_rd_num;</span><br><span class="line"><span class="keyword">wire</span> add_cnt_rd_num;</span><br><span class="line"><span class="keyword">wire</span> end_cnt_rd_num;</span><br><span class="line"><span class="keyword">assign</span> add_cnt_rd_num = (state_c == READ) &amp;&amp; (!avm_waitrequest);</span><br><span class="line"><span class="keyword">assign</span> end_cnt_rd_num = (add_cnt_rd_num) &amp;&amp; (cnt_rd_num == <span class="number">5&#x27;d2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">         cnt_rd_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_rd_num) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (end_cnt_rd_num) <span class="keyword">begin</span></span><br><span class="line">            cnt_rd_num &lt;= <span class="number">5&#x27;d0</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span>  cnt_rd_num &lt;= cnt_rd_num +<span class="number">1&#x27;d1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//fifo连线</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">wire</span> wrfull_sig;</span><br><span class="line">   <span class="keyword">wire</span> wrreq_sig;</span><br><span class="line">   <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] wrusedw_sig;</span><br><span class="line">   <span class="keyword">wire</span> [<span class="number">6</span>:<span class="number">0</span>] rdusedw_sig;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//状态转移条件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">assign</span> idle2read  = (state_c == IDLE) &amp;&amp; (rd_req) ;</span><br><span class="line">   <span class="keyword">assign</span> idle2write = (state_c == IDLE) &amp;&amp; (rdusedw_sig &gt;= <span class="number">8&#x27;d3</span>);</span><br><span class="line">   <span class="keyword">assign</span> read2done  = (state_c == READ) &amp;&amp; (end_cnt_rd_num);</span><br><span class="line">   <span class="keyword">assign</span> write2done = (state_c == WRITE)&amp;&amp; (end_cnt_wr_num);</span><br><span class="line">   <span class="keyword">assign</span> done2idle  = (state_c == DONE) &amp;&amp; <span class="number">1&#x27;d1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//时序描述状态转移      </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            state_c &lt;= IDLE           ;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">         <span class="keyword">else</span> state_c &lt;= state_n      ;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//组合逻辑描述状态转移</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">case</span> (state_c)</span><br><span class="line">          IDLE       :</span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (idle2read) <span class="keyword">begin</span></span><br><span class="line">               state_n = READ;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (idle2write) <span class="keyword">begin</span></span><br><span class="line">               state_n = WRITE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> state_n = state_c;</span><br><span class="line">          <span class="keyword">end</span> </span><br><span class="line">          </span><br><span class="line">          READ       :</span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (read2done) <span class="keyword">begin</span></span><br><span class="line">               state_n = DONE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> state_n = state_c;</span><br><span class="line">          <span class="keyword">end</span>   </span><br><span class="line">          </span><br><span class="line">          WRITE      :</span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (write2done) <span class="keyword">begin</span></span><br><span class="line">               state_n = DONE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> state_n = state_c;</span><br><span class="line">          <span class="keyword">end</span> </span><br><span class="line">          </span><br><span class="line">          DONE       :</span><br><span class="line">          <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (done2idle) <span class="keyword">begin</span></span><br><span class="line">               state_n = IDLE;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> state_n = state_c;</span><br><span class="line">          <span class="keyword">end</span>   </span><br><span class="line">          </span><br><span class="line">            <span class="keyword">default</span>: state_n =IDLE;</span><br><span class="line">         <span class="keyword">endcase</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//输出端口赋值   </span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>]avm_wr_data_w;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">assign</span>   avm_wr_n = !(state_c == WRITE);<span class="comment">//输出</span></span><br><span class="line">   <span class="keyword">assign</span>   avm_rd_n = !(state_c == READ);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//rdfifo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] q_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> rdreq_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> rdempty_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> wrreq_sig_2;</span><br><span class="line">   <span class="keyword">wire</span> wrfull_sig_2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]dout_r;</span><br><span class="line">   <span class="keyword">reg</span> dout_vld_r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">      dout_r &lt;= <span class="number">0</span> ;</span><br><span class="line">      dout_vld_r &lt;= <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">   dout_r  &lt;=  q_sig_2;</span><br><span class="line">   dout_vld_r &lt;= rdreq_sig_2;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">   <span class="keyword">assign</span> dout = dout_r;</span><br><span class="line">   <span class="keyword">assign</span> dout_vld = dout_vld_r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">assign</span> rdreq_sig_2 = (!nrdy) &amp;&amp; (!rdempty_sig_2) ;</span><br><span class="line">   <span class="keyword">assign</span> wrreq_sig_2 = (avm_rd_data_vld) &amp;&amp; (!wrfull_sig_2) ; <span class="comment">//输出数据时，可能已经不是在读状态了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//wrfifo</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">wire</span> rdreq_sig;</span><br><span class="line">   <span class="keyword">wire</span> rdempty_sig;</span><br><span class="line">   <span class="keyword">assign</span> wrreq_sig = (din_vld) &amp;&amp; (!wrfull_sig) ;</span><br><span class="line">   <span class="keyword">assign</span> rdreq_sig = (!rdempty_sig) &amp;&amp; (!avm_waitrequest) &amp;&amp; (state_c == WRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">assign</span> avm_wr_data = avm_wr_data_w;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fifo_1fifo_1_inst (</span><br><span class="line"><span class="variable">.aclr</span> ( !rst_n ),</span><br><span class="line"><span class="variable">.data</span> ( din ),</span><br><span class="line"><span class="variable">.rdclk</span> ( clk ),</span><br><span class="line"><span class="variable">.rdreq</span> ( rdreq_sig ),</span><br><span class="line"><span class="variable">.wrclk</span> ( sys_clk_in ),</span><br><span class="line"><span class="variable">.wrreq</span> ( wrreq_sig ),</span><br><span class="line"><span class="variable">.q</span> ( avm_wr_data_w ),</span><br><span class="line"><span class="variable">.rdempty</span> ( rdempty_sig ),</span><br><span class="line"><span class="variable">.rdfull</span> ( rdfull_sig ),</span><br><span class="line"><span class="variable">.rdusedw</span> ( rdusedw_sig ),</span><br><span class="line"><span class="variable">.wrempty</span> ( wrempty_sig ),</span><br><span class="line"><span class="variable">.wrfull</span> ( wrfull_sig ),</span><br><span class="line"><span class="variable">.wrusedw</span> ( wrusedw_sig )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">6</span>:<span class="number">0</span>]  rdusedw_sig_2;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">5</span>:<span class="number">0</span>]  wrusedw_sig_2;</span><br><span class="line">fifo_2fifo_2_inst (</span><br><span class="line"><span class="variable">.aclr</span> ( !rst_n ),</span><br><span class="line"><span class="variable">.data</span> ( avm_rd_data ),</span><br><span class="line"><span class="variable">.rdclk</span> ( sys_clk_out ),</span><br><span class="line"><span class="variable">.rdreq</span> ( rdreq_sig_2 ),</span><br><span class="line"><span class="variable">.wrclk</span> ( clk ),</span><br><span class="line"><span class="variable">.wrreq</span> ( wrreq_sig_2 ),</span><br><span class="line"><span class="variable">.q</span> ( q_sig_2 ),</span><br><span class="line"><span class="variable">.rdempty</span> ( rdempty_sig_2 ),</span><br><span class="line"><span class="variable">.rdfull</span> ( rdfull_sig_2 ),</span><br><span class="line"><span class="variable">.rdusedw</span> ( rdusedw_sig_2 ),</span><br><span class="line"><span class="variable">.wrempty</span> ( wrempty_sig_2 ),</span><br><span class="line"><span class="variable">.wrfull</span> ( wrfull_sig_2 ),</span><br><span class="line"><span class="variable">.wrusedw</span> ( wrusedw_sig_2 )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></code><h2 id="SDRAM-TOP模块代码"><a href="#SDRAM-TOP模块代码" class="headerlink" title="SDRAM_TOP模块代码 "></a><font color= salmon size=5>SDRAM_TOP模块代码 </font ></h2><code>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> sdram_top (</span><br><span class="line">    <span class="keyword">input</span> sys_clk           ,</span><br><span class="line">    <span class="keyword">input</span> rst_n             ,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx</span></span><br><span class="line">    <span class="keyword">input</span> uart_txd          ,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_tx</span></span><br><span class="line">    <span class="keyword">output</span> uart_rxd         ,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce</span></span><br><span class="line">    <span class="keyword">input</span> key_in            ,   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//pll to sdram</span></span><br><span class="line">    <span class="keyword">output</span> sdram_ctrl_clk   ,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//sdram_interface</span></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">12</span>:<span class="number">0</span>]mem_addr   ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>]mem_ba      ,</span><br><span class="line">    <span class="keyword">output</span> mem_cas_n        ,</span><br><span class="line">    <span class="keyword">output</span> mem_cs_n         ,</span><br><span class="line">    <span class="keyword">output</span> mem_cke          ,</span><br><span class="line">    <span class="keyword">output</span> mem_ras_n        ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>]mem_dqm     ,</span><br><span class="line">    <span class="keyword">output</span> mem_we_n         ,</span><br><span class="line">    <span class="keyword">inout</span>  [<span class="number">15</span>:<span class="number">0</span>]mem_dq</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// wire [15:0]mem_dq_in;</span></span><br><span class="line">   <span class="comment">// wire [15:0]mem_dq_out;</span></span><br><span class="line">   <span class="comment">// wire mem_dq_en;</span></span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">   <span class="comment">// assign mem_dq_in = mem_dq;</span></span><br><span class="line">   <span class="comment">// assign mem_dq = (mem_dq_en)?mem_dq_out:1&#x27;dz;</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx  to sdram_ctrl</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]rx_dout; </span><br><span class="line">    <span class="keyword">wire</span> rx_dout_vld;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_tx  to sdram_ctrl</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]tx_din;</span><br><span class="line">    <span class="keyword">wire</span> tx_din_vld;</span><br><span class="line">    <span class="keyword">wire</span> nrdy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce to sdram_ctrl</span></span><br><span class="line">    <span class="keyword">wire</span> key_out;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//sdram_ctrl to sdram_interface</span></span><br><span class="line">    <span class="comment">//wire [1:0]avm_byteenable;</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">23</span>:<span class="number">0</span>]avm_addr     ;</span><br><span class="line">    <span class="keyword">wire</span> avm_wr_n           ;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>]avm_wr_data  ;</span><br><span class="line">    <span class="keyword">wire</span> avm_rd_n           ;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>]avm_rd_data  ;</span><br><span class="line">    <span class="keyword">wire</span> avm_rd_data_vld    ;</span><br><span class="line">    <span class="keyword">wire</span> avm_waitrequest    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pll to sdram_ctrl sdram_interface</span></span><br><span class="line">    <span class="keyword">wire</span> sdram_clk          ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_debounce u_key_debounce(</span><br><span class="line">    <span class="comment">/*input*/</span>  <span class="variable">.sys_clk</span>(sys_clk)      ,</span><br><span class="line">    <span class="comment">/*input*/</span>  <span class="variable">.rst_n</span>(rst_n)          ,</span><br><span class="line">    <span class="comment">/*input*/</span>  <span class="variable">.key</span>(key_in)           ,</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.keyflag</span>(key_out)  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> uart_rx u_uart_rx(</span><br><span class="line">    <span class="comment">/*input*/</span>       <span class="variable">.sys_clk</span>(sys_clk)                       ,</span><br><span class="line">    <span class="comment">/*input*/</span>       <span class="variable">.rst_n</span>(rst_n)                           ,</span><br><span class="line">    <span class="comment">/*input*/</span>       <span class="variable">.rx</span>(uart_txd)                           ,</span><br><span class="line">    <span class="comment">/*output [7:0]*/</span><span class="variable">.uart_rx_data</span>(rx_dout)                  ,</span><br><span class="line">    <span class="comment">/*output*/</span>      <span class="variable">.uart_rx_lvd</span>(rx_dout_vld)</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> uart_tx u_uart_tx(</span><br><span class="line">    <span class="comment">/*input*/</span>         <span class="variable">.sys_clk</span>(sys_clk)                     ,</span><br><span class="line">    <span class="comment">/*input*/</span>         <span class="variable">.rst_n</span>(rst_n)                         ,</span><br><span class="line">    <span class="comment">/*input [7:0]*/</span>   <span class="variable">.fifo_data_i</span>(tx_din)                  ,</span><br><span class="line">    <span class="comment">/*input*/</span>         <span class="variable">.tx_data_lvd_i</span>(tx_din_vld)            ,</span><br><span class="line">    <span class="comment">/*output*/</span>        <span class="variable">.busy</span>(nrdy)                           ,</span><br><span class="line">    <span class="comment">/*output*/</span>        <span class="variable">.tx_data</span>(uart_rxd)</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> sdram_ctrl u_sdram_ctrl(</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.sys_clk_in</span>(sys_clk),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.sys_clk_out</span>(sys_clk),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.rst_n</span>(rst_n),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//pll</span></span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.clk</span>(sdram_clk),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx</span></span><br><span class="line">    <span class="comment">/*input [7:0]*/</span>     <span class="variable">.din</span>(rx_dout),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.din_vld</span>(rx_dout_vld),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//uart_tx</span></span><br><span class="line">    <span class="comment">/*output [7:0]*/</span>    <span class="variable">.dout</span>(tx_din),</span><br><span class="line">    <span class="comment">/*output*/</span>          <span class="variable">.dout_vld</span>(tx_din_vld),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.nrdy</span>(nrdy),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce</span></span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.rd_req</span>(key_out),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sdram_interface</span></span><br><span class="line">    <span class="comment">//*output [1:0]*/    .avm_byteenable(avm_byteenable),</span></span><br><span class="line">    <span class="comment">/*output [23:0]*/</span>   <span class="variable">.avm_addr</span>(avm_addr),</span><br><span class="line">    <span class="comment">/*output*/</span>          <span class="variable">.avm_wr_n</span>(avm_wr_n),</span><br><span class="line">    <span class="comment">/*output [15:0]*/</span>   <span class="variable">.avm_wr_data</span>(avm_wr_data),</span><br><span class="line">    <span class="comment">/*output*/</span>          <span class="variable">.avm_rd_n</span>(avm_rd_n),</span><br><span class="line">    <span class="comment">/*input  [15:0]*/</span>   <span class="variable">.avm_rd_data</span>(avm_rd_data),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.avm_rd_data_vld</span>(avm_rd_data_vld),</span><br><span class="line">    <span class="comment">/*input*/</span>           <span class="variable">.avm_waitrequest</span>(avm_waitrequest)</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//Avalon_MM IP调用</span></span><br><span class="line">sdram u0 (</span><br><span class="line"><span class="variable">.clk_clk</span>                    (sdram_clk),            <span class="comment">//          clk.clk</span></span><br><span class="line"><span class="variable">.reset_reset_n</span>              (rst_n),                <span class="comment">//        reset.reset_n</span></span><br><span class="line"><span class="variable">.avalon_slave_address</span>       (avm_addr),             <span class="comment">// avalon_slave.address</span></span><br><span class="line"><span class="variable">.avalon_slave_byteenable_n</span>  (<span class="number">2&#x27;b00</span>),                <span class="comment">//             .byteenable_n</span></span><br><span class="line"><span class="variable">.avalon_slave_chipselect</span>    (<span class="number">1&#x27;b1</span>),                 <span class="comment">//             .chipselect</span></span><br><span class="line"><span class="variable">.avalon_slave_writedata</span>     (avm_wr_data),          <span class="comment">//             .writedata</span></span><br><span class="line"><span class="variable">.avalon_slave_read_n</span>        (avm_rd_n),             <span class="comment">//             .read_n</span></span><br><span class="line"><span class="variable">.avalon_slave_write_n</span>       (avm_wr_n),             <span class="comment">//             .write_n</span></span><br><span class="line"><span class="variable">.avalon_slave_readdata</span>      (avm_rd_data),          <span class="comment">//             .readdata</span></span><br><span class="line"><span class="variable">.avalon_slave_readdatavalid</span> (avm_rd_data_vld),      <span class="comment">//             .readdatavalid</span></span><br><span class="line"><span class="variable">.avalon_slave_waitrequest</span>   (avm_waitrequest),      <span class="comment">//             .waitrequest</span></span><br><span class="line"><span class="variable">.sdram_mem_addr</span>             (mem_addr),             <span class="comment">//    sdram_mem.addr</span></span><br><span class="line"><span class="variable">.sdram_mem_ba</span>               (mem_ba),               <span class="comment">//             .ba</span></span><br><span class="line"><span class="variable">.sdram_mem_cas_n</span>            (mem_cas_n),            <span class="comment">//             .cas_n</span></span><br><span class="line"><span class="variable">.sdram_mem_cke</span>              (mem_cke),              <span class="comment">//             .cke</span></span><br><span class="line"><span class="variable">.sdram_mem_cs_n</span>             (mem_cs_n),             <span class="comment">//             .cs_n</span></span><br><span class="line"><span class="variable">.sdram_mem_dq</span>               (mem_dq ),              <span class="comment">//             .dq</span></span><br><span class="line"><span class="variable">.sdram_mem_dqm</span>              (mem_dqm),              <span class="comment">//             .dqm</span></span><br><span class="line"><span class="variable">.sdram_mem_ras_n</span>            (mem_ras_n),            <span class="comment">//             .ras_n</span></span><br><span class="line"><span class="variable">.sdram_mem_we_n</span>             (mem_we_n)              <span class="comment">//             .we_n</span></span><br><span class="line">);         <span class="comment">//相当于下面的sdram_interface模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sdram_interface u_sdram_interface(</span></span><br><span class="line"><span class="comment">//   /*input*/           .rst_n(rst_n),</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   //pll</span></span><br><span class="line"><span class="comment">//   /*input*/           .clk(sdram_ctrl_clk),</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   //sdram_ctrl</span></span><br><span class="line"><span class="comment">//   /*input [1:0]*/     .avs_byteenable(avm_byteenable),</span></span><br><span class="line"><span class="comment">//   /*input [23:0]*/    .avs_addr(avm_addr),</span></span><br><span class="line"><span class="comment">//   /*input*/           .avs_wr_n(avm_wr_n),</span></span><br><span class="line"><span class="comment">//   /*input [15:0]*/    .avs_wr_data(avm_wr_data),</span></span><br><span class="line"><span class="comment">//   /*input*/           .avs_rd_n(avm_rd_n),</span></span><br><span class="line"><span class="comment">//   /*output [15:0]*/   .avs_rd_data(avm_rd_data),</span></span><br><span class="line"><span class="comment">//   /*output*/          .avs_rd_data_vld(avm_rd_data_vld),</span></span><br><span class="line"><span class="comment">//   /*output*/          .avs_waitrequest(avm_waitrequest),</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   //sdram</span></span><br><span class="line"><span class="comment">//   /*output [12:0]*/   .mem_addr(mem_addr),</span></span><br><span class="line"><span class="comment">//   /*output [1:0]*/    .mem_ba(mem_ba),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_cas_n(mem_cas_n),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_cke(mem_cke),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_cs_n(mem_cs_n),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_ras_n(mem_ras_n),</span></span><br><span class="line"><span class="comment">//   /*output [15:0]*/   .mem_dq_out(mem_dq_out),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_dq_en(mem_dq_en),</span></span><br><span class="line"><span class="comment">//   /*input [15:0]*/    .mem_dq_in(mem_dq_in),</span></span><br><span class="line"><span class="comment">//   /*output [1:0]*/    .mem_dqm(mem_dqm),</span></span><br><span class="line"><span class="comment">//   /*output*/          .mem_we_n(mem_we_n)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_pllmy_pll_inst (</span><br><span class="line"><span class="variable">.areset</span> ( !rst_n ),</span><br><span class="line"><span class="variable">.inclk0</span> ( sys_clk ),</span><br><span class="line"><span class="variable">.c0</span> ( sdram_clk ),</span><br><span class="line"><span class="variable">.c1</span> ( sdram_ctrl_clk),<span class="comment">//偏移75</span></span><br><span class="line"><span class="variable">.locked</span> ( locked_sig )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>   </code><h2 id="UART-TX模块代码"><a href="#UART-TX模块代码" class="headerlink" title="UART_TX模块代码 "></a><font color= salmon size=5>UART_TX模块代码 </font ></h2> <code><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> uart_tx (</span><br><span class="line">    <span class="keyword">input</span> sys_clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>]fifo_data_i,</span><br><span class="line">    <span class="keyword">input</span> tx_data_lvd_i,</span><br><span class="line">    <span class="keyword">output</span> busy,</span><br><span class="line">    <span class="keyword">output</span> tx_data</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">parameter</span> TX_BAUD_MAX = <span class="number">16&#x27;d5208</span>;</span><br><span class="line">    <span class="keyword">parameter</span> TX_BIT_MAX = <span class="number">4&#x27;d9</span>     ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]tx_baud               ;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]  tx_bit               ;</span><br><span class="line">    <span class="keyword">reg</span> tx_data_flag                ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> add_tx_baud                ;</span><br><span class="line">    <span class="keyword">wire</span> end_tx_baud                ;</span><br><span class="line">    <span class="keyword">wire</span> add_tx_bit                 ;</span><br><span class="line">    <span class="keyword">wire</span> end_tx_bit                 ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> add_tx_baud = tx_data_flag                                       ;  </span><br><span class="line">    <span class="keyword">assign</span> end_tx_baud = add_tx_baud &amp;&amp; ( tx_baud == TX_BAUD_MAX - <span class="number">16&#x27;d1</span> )  ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> add_tx_bit = end_tx_baud                                         ;</span><br><span class="line">    <span class="keyword">assign</span> end_tx_bit = add_tx_bit &amp;&amp; (tx_bit == TX_BIT_MAX)           ;</span><br><span class="line">    <span class="keyword">assign</span> busy = tx_data_flag                                              ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_baud &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (add_tx_baud) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (end_tx_baud) <span class="keyword">begin</span></span><br><span class="line">            tx_baud &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> tx_baud &lt;= tx_baud + <span class="number">16&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span>                                                       <span class="comment">//baud计数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_bit &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (add_tx_bit) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (end_tx_bit) <span class="keyword">begin</span></span><br><span class="line">            tx_bit &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> tx_bit &lt;= tx_bit + <span class="number">4&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span>                                                       <span class="comment">//bit计数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_data_flag &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tx_data_lvd_i) <span class="keyword">begin</span></span><br><span class="line">        tx_data_flag &lt;= <span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (end_tx_bit) <span class="keyword">begin</span></span><br><span class="line">        tx_data_flag &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span>                                                       <span class="comment">//baud加数标志</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">9</span>:<span class="number">0</span>]tx_data_r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_data_r &lt;= <span class="number">10&#x27;h3ff</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( tx_data_lvd_i ) <span class="keyword">begin</span></span><br><span class="line">        tx_data_r &lt;= &#123;<span class="number">1&#x27;b1</span>,fifo_data_i,<span class="number">1&#x27;b0</span>&#125;;                       <span class="comment">//先进先出</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>                                                                 <span class="comment">//把有效的8位数据转换为标准10位数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> tx_data_o               ;</span><br><span class="line">    <span class="keyword">assign</span> tx_data = tx_data_o  ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_data_o &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tx_baud == <span class="number">16&#x27;d1</span>) <span class="keyword">begin</span></span><br><span class="line">        tx_data_o &lt;= tx_data_r[tx_bit];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure> </code><h2 id="UART-RX模块代码"><a href="#UART-RX模块代码" class="headerlink" title="UART_RX模块代码 "></a><font color= salmon size=5>UART_RX模块代码 </font ></h2> <code><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> uart_rx (</span><br><span class="line">    <span class="keyword">input</span> sys_clk                               ,</span><br><span class="line">    <span class="keyword">input</span> rst_n                                 ,</span><br><span class="line">    <span class="keyword">input</span> rx                                    ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>]uart_rx_data                    ,</span><br><span class="line">    <span class="keyword">output</span> uart_rx_lvd</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">parameter</span> IDLE          = <span class="number">4&#x27;b0001</span>           ,</span><br><span class="line">          START         = <span class="number">4&#x27;b0010</span>           ,</span><br><span class="line">          RD_DATA       = <span class="number">4&#x27;b0100</span>           ,</span><br><span class="line">          STOP          = <span class="number">4&#x27;b1000</span>           ;                         <span class="comment">//参数声明</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">wire</span> idle2start                             ;</span><br><span class="line"><span class="keyword">wire</span> start2idle                             ;</span><br><span class="line"><span class="keyword">wire</span> start2rd_data                          ;</span><br><span class="line"><span class="keyword">wire</span> rd_data2stop                           ;</span><br><span class="line"><span class="keyword">wire</span> stop2idle                              ;                        <span class="comment">//内部参数声明</span></span><br><span class="line"><span class="keyword">wire</span> nedge                                  ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]state_c                            ;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]state_n                            ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">9</span>:<span class="number">0</span>]uart_rx_data_r                      ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>]rx_r                               ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>]cnt_baud ;</span><br><span class="line"><span class="keyword">wire</span>  add_cnt_baud ;</span><br><span class="line"><span class="keyword">wire</span>  end_cnt_baud ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>]cnt_bit ;</span><br><span class="line"><span class="keyword">wire</span>  add_cnt_bit ;</span><br><span class="line"><span class="keyword">wire</span>  end_cnt_bit ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">assign</span> nedge = (!rx_r[<span class="number">1</span>])&amp;&amp;(rx_r[<span class="number">2</span>])        ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">assign</span> idle2start       =           (state_c == IDLE)    &amp;&amp; (nedge             )                    ;</span><br><span class="line"><span class="keyword">assign</span> start2idle       =           (state_c == START)   &amp;&amp; (uart_rx_data_r[<span class="number">9</span>] ) &amp;&amp; (end_cnt_baud)  ;</span><br><span class="line"><span class="keyword">assign</span> start2rd_data    =           (state_c == START)   &amp;&amp; (~uart_rx_data_r[<span class="number">9</span>]) &amp;&amp; (end_cnt_baud)  ;</span><br><span class="line"><span class="keyword">assign</span> rd_data2stop     =           (state_c == RD_DATA) &amp;&amp; (cnt_bit == <span class="number">8</span>      ) &amp;&amp; (end_cnt_baud)  ;  </span><br><span class="line"><span class="keyword">assign</span> stop2idle        =           (state_c == STOP)    &amp;&amp; (end_cnt_bit       )                    ;</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        state_c &lt;= IDLE ;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        state_c &lt;= state_n;</span><br><span class="line"><span class="keyword">end</span>                                                      <span class="comment">//时序逻辑</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span> (state_c)</span><br><span class="line">      IDLE   :<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (idle2start) <span class="keyword">begin</span></span><br><span class="line">             state_n =  START  ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> state_n =  IDLE   ;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      START  :<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (start2rd_data) <span class="keyword">begin</span></span><br><span class="line">            state_n  =  RD_DATA;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (start2idle) <span class="keyword">begin</span></span><br><span class="line">            state_n  =  IDLE   ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            state_n  =  START  ;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      RD_DATA:<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (rd_data2stop) <span class="keyword">begin</span></span><br><span class="line">            state_n  =  STOP   ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            state_n  =  RD_DATA;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      STOP   :<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (stop2idle) <span class="keyword">begin</span></span><br><span class="line">            state_n  =  IDLE   ; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            state_n  =  STOP   ;</span><br><span class="line">      <span class="keyword">end</span> </span><br><span class="line">        <span class="keyword">default</span>: state_n  =  IDLE   ; </span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span>                                                  <span class="comment">//次态的组合逻辑</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            rx_r &lt;= <span class="number">3&#x27;d1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            rx_r[<span class="number">0</span>] &lt;= rx;</span><br><span class="line">            rx_r[<span class="number">1</span>] &lt;= rx_r[<span class="number">0</span>];</span><br><span class="line">            rx_r[<span class="number">2</span>] &lt;= rx_r[<span class="number">1</span>];                               <span class="comment">//打拍检测下降沿</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  reg add_cnt_baud_flag;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//  always @(posedge sys_clk or negedge rst_n ) begin</span></span><br><span class="line"> <span class="comment">//      if (!rst_n) begin</span></span><br><span class="line"> <span class="comment">//          add_cnt_baud_flag &lt;= 1&#x27;d0;</span></span><br><span class="line"> <span class="comment">//      end</span></span><br><span class="line"> <span class="comment">//      else if (idle2start) begin</span></span><br><span class="line"> <span class="comment">//          add_cnt_baud_flag &lt;= 1&#x27;d1;</span></span><br><span class="line"> <span class="comment">//      end</span></span><br><span class="line"> <span class="comment">//      else if (start2idle) begin</span></span><br><span class="line"> <span class="comment">//          add_cnt_baud_flag &lt;= 1&#x27;d0;                          //当idle2start开始计数，start2idle，stop2idle计数停止</span></span><br><span class="line"> <span class="comment">//      end</span></span><br><span class="line"> <span class="comment">//      else if (stop2idle) begin</span></span><br><span class="line"> <span class="comment">//          add_cnt_baud_flag &lt;= 1&#x27;d0;</span></span><br><span class="line"> <span class="comment">//      end</span></span><br><span class="line"> <span class="comment">//  end                                                        //计数标志信号</span></span><br><span class="line">                                                                <span class="comment">//state_c !=IDLE代替了add_cnt_baud_flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> BAUD_MAX   =  <span class="number">16&#x27;d5208</span>                                        ;</span><br><span class="line">    <span class="keyword">assign</span> add_cnt_baud  =  (state_c !=IDLE)                                ;</span><br><span class="line">    <span class="keyword">assign</span> end_cnt_baud  =  add_cnt_baud &amp;&amp; (cnt_baud == BAUD_MAX - <span class="number">16&#x27;d1</span>)  ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            cnt_baud &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (start2idle) <span class="keyword">begin</span></span><br><span class="line">            cnt_baud &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_baud) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (end_cnt_baud) <span class="keyword">begin</span></span><br><span class="line">            cnt_baud &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> cnt_baud &lt;= cnt_baud + <span class="number">16&#x27;d1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">                                                                <span class="comment">//baud计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">parameter</span> BIT_MAX  = <span class="number">4&#x27;d9</span>                               ;</span><br><span class="line">    <span class="keyword">assign</span> add_cnt_bit = end_cnt_baud                       ;</span><br><span class="line">    <span class="keyword">assign</span> end_cnt_bit = add_cnt_bit &amp;&amp; (cnt_bit == BIT_MAX);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            cnt_bit &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (start2idle) <span class="keyword">begin</span></span><br><span class="line">            cnt_bit &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (add_cnt_bit) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (end_cnt_bit) <span class="keyword">begin</span></span><br><span class="line">            cnt_bit &lt;= <span class="number">4&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> cnt_bit &lt;= cnt_bit + <span class="number">4&#x27;d1</span>;</span><br><span class="line">        <span class="keyword">end</span>                                                    <span class="comment">//bit计数</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> uart_rx_data = uart_rx_data_r[<span class="number">8</span>:<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            uart_rx_data_r &lt;= <span class="number">10&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (start2idle) <span class="keyword">begin</span></span><br><span class="line">            uart_rx_data_r &lt;= <span class="number">10&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cnt_baud == BAUD_MAX&gt;&gt;<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            uart_rx_data_r &lt;= &#123;rx,uart_rx_data_r[<span class="number">9</span>:<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">           </span><br><span class="line">    <span class="keyword">end</span>                                                       <span class="comment">//把每个baud中间的值寄存在uart_rx_data_r</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> uart_rx_lvd_r                       ;</span><br><span class="line">    <span class="keyword">assign</span> uart_rx_lvd  =  uart_rx_lvd_r    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n ) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            uart_rx_lvd_r &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stop2idle) <span class="keyword">begin</span></span><br><span class="line">            uart_rx_lvd_r &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> uart_rx_lvd_r &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span>                                                      <span class="comment">//有效标志拉高</span></span><br><span class="line"></span><br><span class="line">                                                             <span class="comment">//输出逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> </code><h2 id="key-debounce模块代码"><a href="#key-debounce模块代码" class="headerlink" title="key_debounce模块代码 "></a><font color= salmon size=5>key_debounce模块代码 </font ></h2> <code><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> key_debounce (</span><br><span class="line">    <span class="keyword">input</span> sys_clk                                                                ,</span><br><span class="line">    <span class="keyword">input</span> rst_n                                                                  ,</span><br><span class="line">    <span class="keyword">input</span> key                                                                    ,</span><br><span class="line">    <span class="keyword">output</span> keyflag  </span><br><span class="line">);</span><br><span class="line">    <span class="keyword">parameter</span> TIME_20MS = <span class="number">20&#x27;d1_000_000</span>                                          ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">25</span>:<span class="number">0</span>] cnt_20ms                                                          ;</span><br><span class="line">    <span class="keyword">reg</span> add_flag                                                                 ;</span><br><span class="line">    <span class="keyword">reg</span> key_r0                                                                   ;</span><br><span class="line">    <span class="keyword">reg</span> key_r1                                                                   ;</span><br><span class="line">    <span class="keyword">reg</span> keyflag_r                                                                ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> add_cnt_20ms                                                            ;</span><br><span class="line">    <span class="keyword">wire</span> end_cnt_20ms                                                            ;</span><br><span class="line">    <span class="keyword">wire</span> nedge                                                                   ;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> nedge = !key_r0 &amp;&amp; key_r1                                             ;</span><br><span class="line">    <span class="keyword">assign</span> add_cnt_20ms =  add_flag                                              ;</span><br><span class="line">    <span class="keyword">assign</span> end_cnt_20ms =  add_flag &amp;&amp; (cnt_20ms == TIME_20MS -<span class="number">20&#x27;d1</span>)            ;</span><br><span class="line">    <span class="keyword">assign</span> keyflag = keyflag_r                                                   ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        cnt_20ms &lt;= <span class="number">20&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(nedge)<span class="keyword">begin</span></span><br><span class="line">        cnt_20ms &lt;= <span class="number">20&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(add_cnt_20ms)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(end_cnt_20ms)<span class="keyword">begin</span></span><br><span class="line">            cnt_20ms &lt;= <span class="number">20&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> cnt_20ms &lt;= cnt_20ms + <span class="number">20&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        key_r0 &lt;= <span class="number">1&#x27;d1</span>;</span><br><span class="line">        key_r1 &lt;= <span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        key_r0 &lt;= key;</span><br><span class="line">        key_r1 &lt;= key_r0;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        add_flag &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(nedge)<span class="keyword">begin</span></span><br><span class="line">        add_flag &lt;= <span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(end_cnt_20ms)<span class="keyword">begin</span></span><br><span class="line">        add_flag &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        keyflag_r &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (end_cnt_20ms) <span class="keyword">begin</span></span><br><span class="line">        keyflag_r &lt;= ~key;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> keyflag_r &lt;= <span class="number">1&#x27;d0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure> </code><h2 id="testbench代码"><a href="#testbench代码" class="headerlink" title="testbench代码 "></a><font color= salmon size=5>testbench代码 </font ></h2> <code><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ps</span></span><br><span class="line"><span class="keyword">module</span> sdram_top_tb ();</span><br><span class="line">    <span class="comment">/*input*/</span> <span class="keyword">reg</span> sys_clk;</span><br><span class="line">    <span class="comment">/*input*/</span> <span class="keyword">reg</span> rst_n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx</span></span><br><span class="line">    <span class="comment">/*input*/</span><span class="keyword">reg</span> uart_txd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_tx</span></span><br><span class="line">    <span class="comment">/*output*/</span><span class="keyword">wire</span> uart_rxd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce</span></span><br><span class="line">    <span class="comment">/*input*/</span> <span class="keyword">reg</span> key_in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pll to sdram</span></span><br><span class="line">    <span class="comment">/*output*/</span> <span class="keyword">wire</span> sdram_ctrl_clk;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//sdram_interface</span></span><br><span class="line">    <span class="comment">/*output [12:0]*/</span><span class="keyword">wire</span> [<span class="number">12</span>:<span class="number">0</span>]mem_addr;</span><br><span class="line">    <span class="comment">/*output [1:0]*/</span><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>]mem_ba;</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="keyword">wire</span> mem_cas_n;</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="keyword">wire</span> mem_cs_n;</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="keyword">wire</span> mem_cke;</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="keyword">wire</span> mem_ras_n;</span><br><span class="line">    <span class="comment">/*output [1:0]*/</span><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>]mem_dqm;</span><br><span class="line">    <span class="comment">/*output*/</span><span class="keyword">wire</span> mem_we_n;</span><br><span class="line">    <span class="comment">/*inout  [15:0]*/</span><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>]mem_dq;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*     wire    [15:0]      sdram_dq_in     ;</span></span><br><span class="line"><span class="comment">    wire    [15:0]      sdram_dq_out    ;</span></span><br><span class="line"><span class="comment">    wire                sdram_dq_out_en ;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">assign sdram_dq_in = sdram_mem_dq;</span></span><br><span class="line"><span class="comment">assign sdram_mem_dq = sdram_dq_out_en?sdram_dq_out:16&#x27;hzzzz;   */</span></span><br><span class="line"><span class="keyword">defparam</span> u_sdram_top<span class="variable">.u_key_debounce</span><span class="variable">.TIME_20MS</span> = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">defparam</span>  u_sdram_top<span class="variable">.u_uart_rx</span><span class="variable">.BAUD_MAX</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">defparam</span>  u_sdram_top<span class="variable">.u_uart_tx</span><span class="variable">.TX_BAUD_MAX</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块例化</span></span><br><span class="line"> sdram_top u_sdram_top(</span><br><span class="line">    <span class="comment">/*input*/</span> <span class="variable">.sys_clk</span>(sys_clk),</span><br><span class="line">    <span class="comment">/*input*/</span> <span class="variable">.rst_n</span>(rst_n),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_rx</span></span><br><span class="line">    <span class="comment">/*input*/</span> <span class="variable">.uart_txd</span>(uart_txd),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uart_tx</span></span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.uart_rxd</span>(uart_rxd),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key_debounce</span></span><br><span class="line">    <span class="comment">/*input*/</span> <span class="variable">.key_in</span>(key_in),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pll to sdram</span></span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.sdram_ctrl_clk</span>(sdram_ctrl_clk),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sdram_interface</span></span><br><span class="line">    <span class="comment">/*output [12:0]*/</span><span class="variable">.mem_addr</span>(mem_addr),</span><br><span class="line">    <span class="comment">/*output [1:0]*/</span><span class="variable">.mem_ba</span>(mem_ba),</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.mem_cas_n</span>(mem_cas_n),</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.mem_cs_n</span>(mem_cs_n),</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.mem_cke</span>(mem_cke),</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.mem_ras_n</span>(mem_ras_n),</span><br><span class="line">    <span class="comment">/*output [1:0]*/</span><span class="variable">.mem_dqm</span>(mem_dqm),</span><br><span class="line">    <span class="comment">/*output*/</span> <span class="variable">.mem_we_n</span>(mem_we_n),</span><br><span class="line">    <span class="comment">/*inout  [15:0]*/</span><span class="variable">.mem_dq</span>(mem_dq)</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">sdr u_sdr(</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Clk</span>  (sdram_ctrl_clk    ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Cke</span>  (mem_cke    ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Cs_n</span> (mem_cs_n   ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Ras_n</span>(mem_ras_n  ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Cas_n</span>(mem_cas_n  ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.We_n</span> (mem_we_n   ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Addr</span> (mem_addr   ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Ba</span>   (mem_ba     ),</span><br><span class="line">    <span class="comment">/*inout   */</span><span class="variable">.Dq</span>   (mem_dq     ),</span><br><span class="line">    <span class="comment">/*input   */</span><span class="variable">.Dqm</span>  (mem_dqm    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生时钟</span></span><br><span class="line"><span class="keyword">localparam</span> CLK_PERIOD = <span class="number">20</span>;<span class="comment">//一个周期为20ns</span></span><br><span class="line"><span class="keyword">initial</span> sys_clk = <span class="number">1&#x27;b0</span>;<span class="comment">//时钟初始值为0</span></span><br><span class="line"><span class="keyword">always</span> <span class="variable">#(CLK_PERIOD/2)</span> sys_clk=~sys_clk;<span class="comment">//一个周期有0，1两个电平交互，always表示循环 ，#表示延时</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//复位3个周期</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    rst_n = <span class="number">1&#x27;b0</span>;<span class="comment">//复位为0</span></span><br><span class="line">    <span class="variable">#(CLK_PERIOD *3)</span>;<span class="comment">//延时3个周期</span></span><br><span class="line">    rst_n = <span class="number">1&#x27;b1</span>;<span class="comment">//将原有的低电平拉高为1，变为高电平，此后每隔3周期高低电平交互</span></span><br><span class="line">    <span class="comment">// #10000;//运行10000ns之后停止运行</span></span><br><span class="line">    <span class="comment">// $stop;</span></span><br><span class="line">    <span class="comment">// #(CLK_PERIOD *2000);//停止运行</span></span><br><span class="line">    <span class="comment">// $stop;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//激励--即输入</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//设置初始状态，按键未按下</span></span><br><span class="line">    key_in = <span class="number">1&#x27;b1</span>;</span><br><span class="line">    uart_txd =<span class="number">1&#x27;b1</span>;</span><br><span class="line">    #<span class="number">3</span>;</span><br><span class="line">    <span class="variable">#(CLK_PERIOD *5)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repeat</span>(<span class="number">6</span>)<span class="keyword">begin</span> <span class="comment">//发开始位</span></span><br><span class="line">    uart_txd = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="variable">#(CLK_PERIOD *100)</span>;</span><br><span class="line">    <span class="comment">//发数据位</span></span><br><span class="line">    <span class="keyword">repeat</span>(<span class="number">8</span>)<span class="keyword">begin</span></span><br><span class="line">    uart_txd = &#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">    <span class="variable">#(CLK_PERIOD *100)</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">//发停止位</span></span><br><span class="line">    uart_txd = <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="variable">#(CLK_PERIOD *100)</span>;</span><br><span class="line">    <span class="comment">//空闲200</span></span><br><span class="line">    <span class="variable">#(CLK_PERIOD *200)</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  @(<span class="keyword">negedge</span> u_sdram_top<span class="variable">.u_sdram_ctrl</span><span class="variable">.avm_waitrequest</span>);</span><br><span class="line">   <span class="variable">#(CLK_PERIOD *200)</span>;</span><br><span class="line"> key_in = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="variable">#(CLK_PERIOD *200)</span>;</span><br><span class="line"> key_in = <span class="number">1&#x27;b1</span>;</span><br><span class="line">  <span class="comment">//@(posedge u_sdram_top.u_sdram_ctrl.avm_rd_data_vld);</span></span><br><span class="line"><span class="variable">#(CLK_PERIOD *5000)</span>;  </span><br><span class="line">  <span class="built_in">$stop</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure> </code>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> SDRAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> SDRAM </tag>
            
            <tag> Avalon_MM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA内部结构</title>
      <link href="/2023/05/22/FPGA%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2023/05/22/FPGA%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="FPGA内部结构"><a href="#FPGA内部结构" class="headerlink" title="FPGA内部结构"></a>FPGA内部结构</h1><h2 id="1-可编程逻辑单元（LABS）"><a href="#1-可编程逻辑单元（LABS）" class="headerlink" title="1. 可编程逻辑单元（LABS）"></a><font color= salmon size=5>1. 可编程逻辑单元（LABS）</font ></h2><ul><li><font color= LightSkyBlue size=5>  FPGA的基本可编程逻辑单元是由查找表（LUT）和寄存器（Register）组成的，查找表完成纯组合逻辑功能。FPGA内部寄存器可配置为带同步&#x2F;异步复位和置位、时钟使能的触发器，也可以配置成为锁存器。FPGA一般依赖寄存器完成同步时序逻辑设计。</font > <details><summary>展开查看</summary><pre><code>-<font color= LightSlateGray size=3> 【包含逻辑单元（LEs）,自适逻辑模块（ALMs）,查找表（LUT）,进位逻辑，输出寄存器逻辑】lut dff辅助逻辑</font >  -<font color= LightSlateGray size=3> LE和ALM是同级的，有些LAB里是LE，有些是ALM。ALM比LE复杂一些。</font > </code></pre></details></li></ul><h2 id="2-可编程连线-丰富的布线资源"><a href="#2-可编程连线-丰富的布线资源" class="headerlink" title="2.可编程连线(丰富的布线资源)"></a><font color= salmon size=5>2.可编程连线(丰富的布线资源)</font ></h2><ul><li><font color= LightSkyBlue size=5>  布线资源连通FPGA内部所有单元，连线的长度和工艺决定着信号在连线上的驱动能力和传输速度。布线资源的划分：<br><br>  (1)全局性的专用布线资源：以完成器件内部的全局时钟和全局复位&#x2F;置位的布线；<br><br>  (2)长线资源：用以完成器件Bank间的一些高速信号和一些第二全局时钟信号的布线；<br><br>  (3)短线资源：用来完成基本逻辑单元间的逻辑互连与布线；<br><br>  (4)其他：在逻辑单元内部还有着各种布线资源和专用时钟、复位等控制信号线。</font ></li></ul><h2 id="3-可编程输入输出单元（I-x2F-O单元）"><a href="#3-可编程输入输出单元（I-x2F-O单元）" class="headerlink" title="3.可编程输入输出单元（I&#x2F;O单元）"></a><font color= salmon size=5>3.可编程输入输出单元（I&#x2F;O单元）</font ></h2><details><summary>展开查看</summary><pre><code>- <font color= LightSlateGray size=3>   （多个I/O标准，差分信号输出，电流驱动强度/速度调节，片上终端/上拉电阻，开漏/三态）</font > - </code></pre></details><ul><li><font color= LightSkyBlue size=5>  目前大多数FPGA的I&#x2F;O单元被设计为可编程模式，即通过软件的灵活配置，可适应不同的电器标准与I&#x2F;O物理特性；可以调整匹配阻抗特性，上下拉电阻；可以调整输出驱动电流的大小等。</font ></li></ul><h2 id="4-时钟资源"><a href="#4-时钟资源" class="headerlink" title="4.时钟资源"></a><font color= salmon size=5>4.时钟资源</font ></h2><details><summary>展开查看</summary><pre><code>- <font color= LightSlateGray size=3>   （PLL,专用输入时钟引脚，时钟控制模块，时钟布线网络）</font > - </code></pre></details><ul><li><font color= LightSkyBlue size=5>  专用输入时钟引脚、锁相环（PLL）、时钟控制模块（选择时钟以提供时钟布线网、可启用&#x2F;禁用时钟以节能）、时钟布线网络（全局时钟网络驱动整个设备、局部时钟网络驱动特定的设备区域）</font ></li></ul><h2 id="5-嵌入式块RAM"><a href="#5-嵌入式块RAM" class="headerlink" title="5.嵌入式块RAM"></a><font color= salmon size=5>5.嵌入式块RAM</font ></h2><ul><li><font color= LightSkyBlue size=5>  目前大多数FPGA都有内嵌的块RAM。嵌入式块RAM可以配置为单端口RAM、双端口RAM、伪双端口RAM、CAM、FIFO等存储结构。CAM，即为内容地址存储器。写入CAM的数据会和其内部存储的每一个数据进行比较，并返回与端口数据相同的所有内部数据的地址。简单的说，RAM是一种写地址，读数据的存储单元；CAM与RAM恰恰相反。</font ></li></ul><h2 id="6-底层嵌入功能单元"><a href="#6-底层嵌入功能单元" class="headerlink" title="6.底层嵌入功能单元"></a><font color= salmon size=5>6.底层嵌入功能单元</font ></h2><details><summary>展开查看</summary><pre><code>- <font color= LightSlateGray size=3>   （DSP模块，高速收发器，硬IP模块）</font >- </code></pre></details><ul><li><font color= LightSkyBlue size=5>  底层嵌入功能单元是指通用程度较高的嵌入式功能模块。如锁相环(Phase Locked Loop,PLL)、DLL(Delay Locked Loop)、DSP(Digital Signal Processing)和CPU等。</font ></li></ul><details><summary>展开查看</summary><pre><code><h2 id="FPGA→LAB（逻辑阵列块）→LE-ALM-（自适应逻辑模块）【最小逻辑单元】→LUT-触发器-辅助逻辑"><a href="#FPGA→LAB（逻辑阵列块）→LE-ALM-（自适应逻辑模块）【最小逻辑单元】→LUT-触发器-辅助逻辑" class="headerlink" title="FPGA→LAB（逻辑阵列块）→LE(ALM)（自适应逻辑模块）【最小逻辑单元】→LUT+触发器+辅助逻辑"></a>FPGA→LAB（逻辑阵列块）→LE(ALM)（自适应逻辑模块）【最小逻辑单元】→LUT+触发器+辅助逻辑</h2><p></code></pre></p></details>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
          <category> FPGA内部结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> FPGA内部结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/20/hello-world/"/>
      <url>/2023/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Icaurs</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
